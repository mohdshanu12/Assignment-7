# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16E0GEI6xDIGEp2B3-bPpXwBT-k-1287e
"""

#1 If we have an object which has both instance as well as class attr, who will get preference?

# When an object has both instance attributes and class attributes with the same name, 
# the instance attribute takes precedence over the class attribute. 
# This means that if you access the attribute on the object, it will return the value of the instance attribute.

# However, if the object does not have an instance attribute with that name, 
# it will fail back to the class attribute and return its value.

#2 Create a class and make three object with different parameters and change the values when you retrive data from the class.

class Employee:
    def __init__(self, name, company, occupation):
        self.name = name
        self.company = company
        self.occupation = occupation
    
    def get_info(self):
        return f"{self.name} works in {self.company} as a {self.occupation}"
    

c1 = Employee("Shanu", "cloudEQ", "Software Trainee")
c2 = Employee("Rama", "Amazon", "Aws")
c3 = Employee("Aman", "Accenture", "Networking")

print(c1.get_info())  # Output: Shanuworks in cloudEQ as a Software Trainee

print(c2.get_info()) 
 # Output: Rama works in phonePe as a SRE 
print(c3.get_info())  
# Output: Aman works in cloudEQ as a DevOps Engineer

# 3 Define Super method and Class method

# The super() method is used to call a method of the parent class from a subclass.

# A decorator that allows you to define a method that operates on the class itself, 
# rather than on instances of the class. This is often used as an alternative constructor for a class.